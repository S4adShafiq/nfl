import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class Stats extends StatefulWidget {
  const Stats({super.key});

  @override
  _StatsState createState() => _StatsState();
}

class _StatsState extends State<Stats> {
  List<dynamic> standings = [];

  @override
  void initState() {
    super.initState();
    fetchStats();
  }

  Future<void> fetchStats() async {
    final url = Uri.parse(
      "https://api-american-football.p.rapidapi.com/standings?league=1&season=2022",
    );
    final response = await http.get(
      url,
      headers: {
        "x-rapidapi-key": "8a9125ed2dmshcf29a2074d5c92dp1e391ejsnbea36dd23fba",
        "x-rapidapi-host": "api-american-football.p.rapidapi.com",
      },
    );

    if (response.statusCode == 200) {
      final Map<String, dynamic> data = json.decode(response.body);
      setState(() {
        standings = data['response'];
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Colors.black,
              Color(0xFF0A1931),
              Colors.black,
            ], // Black-Navy-Black Gradient
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: Column(
          children: [
            AppBar(
              title: const Text("NFL Standings"),
              backgroundColor: Colors.transparent,
              elevation: 0,
            ),
            Expanded(
              child:
                  standings.isEmpty
                      ? const Center(child: CircularProgressIndicator())
                      : ListView.builder(
                        padding: const EdgeInsets.all(10),
                        itemCount: standings.length,
                        itemBuilder: (context, index) {
                          final team = standings[index]['team'];
                          final record = standings[index];

                          return Card(
                            elevation: 5,
                            margin: const EdgeInsets.symmetric(vertical: 8),
                            child: ListTile(
                              leading: Image.network(
                                team['logo'],
                                width: 50,
                                height: 50,
                              ),
                              title: Row(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Text(
                                    team['name'],
                                    style: const TextStyle(
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                ],
                              ),
                              subtitle: Column(
                                children: [
                                  SizedBox(height: 3),
                                  Text("Position üèÜ ${record['position']} "),
                                  Row(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      Text(
                                        "Wins: ${record['won']} | ",
                                        style: const TextStyle(
                                          color: Colors.blue,
                                        ),
                                      ),
                                      Text(
                                        "Losses: ${record['lost']}",
                                        style: const TextStyle(
                                          color: Colors.red,
                                        ),
                                      ),
                                    ],
                                  ),
                                ],
                              ),
                              trailing: Column(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Text(
                                    "Points: ${record['points']['for']}",
                                    style: const TextStyle(
                                      fontWeight: FontWeight.bold,
                                      color: Colors.green,
                                    ),
                                  ),
                                  Text(
                                    "Against: ${record['points']['against']}",
                                    style: TextStyle(color: Colors.yellow),
                                  ),
                                ],
                              ),
                            ),
                          );
                        },
                      ),
            ),
          ],
        ),
      ),
    );
  }
}
